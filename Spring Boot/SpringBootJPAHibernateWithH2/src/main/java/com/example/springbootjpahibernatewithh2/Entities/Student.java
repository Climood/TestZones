package com.example.springbootjpahibernatewithh2.Entities;


import javax.persistence.*;
import java.util.List;

@Entity //отмечаем как сущность, чтобы Jpa(у нас будет его реализация - hibernate) загрузил его
//@Entity(name="STUDENT") Можем указать имя таблице напрямую(чтобы бло uppercase, например)
// НО ЧТОБЫ работало, в application.properties делаем
//spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
public class Student {
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO) //ставим автогенерацию, я не хочу чтобы ид писал сам    (а в insert приходится указывать id)
    private Long id;
    private String name;
    private String passportNumber;

    @ManyToMany(mappedBy = "students")
    private List<Examines> examines;

    /*
    далее могу создать так
    CREATE TABLE Student
  (
     id            BIGINT NOT NULL,
     OTHER_COLUMNS
  )


  CREATE TABLE students_examines  //так мы получим таблицу, в которой у групп студентов будут несколько экзаменов
  (
     students_id BIGINT NOT NULL,
     tasks_id     INTEGER NOT NULL
  )

  CREATE TABLE examines
  (
     id          INTEGER GENERATED BY DEFAULT AS IDENTITY,
     OTHER_COLUMNS
  )
     */

    public Student(){ //конструктор по умолчанию нужный для JPA
        super();
    }

    public Student(Long id,String name, String passportNumber) {
        super();
        this.id = id;
        this.name = name;
        this.passportNumber = passportNumber;
    }

    public Student(String name, String passportNumber) {
        super();
        this.name = name;
        this.passportNumber = passportNumber;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getPassportNumber() {
        return passportNumber;
    }

    public void setPassportNumber(String passportNumber) {
        this.passportNumber = passportNumber;
    }

    @Override
    public String toString(){
        return String.format("Студент : id:%d, имя:%s,паспорт:%s",id,name,passportNumber);
    }
}


//после создания можно вставить в бд данные, создав файл name.sql в resourses и написав туда команды (insert например)
//когда перезапустим прогу увидим, что Executing SQL script from URL и путь до файла
//я же вставлю данные через h2 - console
